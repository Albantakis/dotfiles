# -*- coding: utf-8 -*-

"""Best goddamn .pythonrc file in the whole world.

This file is executed when the Python interactive shell is started if
$PYTHONSTARTUP is in your environment and points to this file. It's just
regular Python commands, so do what you will. Your ~/.inputrc file can greatly
complement this file.

"""
# Imports we need
import sys
import os
from termcolor import colored
import colorama
import readline, rlcompleter
import atexit
from pprint import pprint
from tempfile import mkstemp
from code import InteractiveConsole

# Imports we want
import datetime
import pdb

AUTHOR = 'Seth House <seth@eseth.com>'

colorama.init()

# Enable a History
##################

HISTFILE="%s/.pyhistory" % os.environ["HOME"]

# Read the existing history if there is one
if os.path.exists(HISTFILE):
    readline.read_history_file(HISTFILE)

# Set maximum number of items that will be written to the history file
readline.set_history_length(300)

def savehist():
    readline.write_history_file(HISTFILE)

atexit.register(savehist)

# Enable Color Prompts
######################

sys.ps1 = colored('>>> ', 'green')
sys.ps2 = colored('... ', 'red')

# Enable Pretty Printing for stdout
###################################

def my_displayhook(value):
    if value is not None:
        try:
            import __builtin__
            __builtin__._ = value
        except ImportError:
            __builtins__._ = value

        pprint(value)
sys.displayhook = my_displayhook

# Welcome message
#################

WELCOME = colored("""\

Type <C-j> and <C-k> to go forward and backward through your history.
Type \e to get an external editor.
""", 'blue')

atexit.register(lambda: sys.stdout.write(colored("""
Peace out.
""", 'blue')))

# Django Helpers
################

def SECRET_KEY():
    "Generates a new SECRET_KEY that can be used in a project settings file."

    from random import choice
    return ''.join(
            [choice('abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)')
                for i in range(50)])

# If we're working with a Django project, set up the environment
if 'DJANGO_SETTINGS_MODULE' in os.environ:
    from django.db.models.loading import get_models
    from django.test.client import Client
    from django.test.utils import setup_test_environment, teardown_test_environment
    from django.conf import settings as S

    class DjangoModels(object):
        """Loop through all the models in INSTALLED_APPS and import them."""
        def __init__(self):
            for m in get_models():
                setattr(self, m.__name__, m)

    A = DjangoModels()
    C = Client()

    WELCOME += colored("""
Django environment detected.
* Your INSTALLED_APPS models are available as `A`.
* Your project settings are available as `S`.
* The Django test client is available as `C`.
%s""", 'green')

    setup_test_environment()
    S.DEBUG_PROPAGATE_EXCEPTIONS = True

    WELCOME += colored("""
Warning: the Django test environment has been set up; to restore the
normal environment call `teardown_test_environment()`.

Warning: DEBUG_PROPAGATE_EXCEPTIONS has been set to True.
%s""", 'orange')

# Read and execute local .pythonrc.py
#####################################

if os.path.isfile('.pythonrc.py'):
    exec(open('.pythonrc.py').read())


# Salt Helpers
##############
if 'SALT_MASTER_CONFIG' in os.environ:
    try:
        import salt.config
        import salt.client
        import salt.runner
    except ImportError:
        pass
    else:
        __opts_master__ = salt.config.master_config(
                os.environ['SALT_MASTER_CONFIG'])

        # Instantiate LocalClient and RunnerClient
        SLC = salt.client.LocalClient(__opts_master__)
        SRUN = salt.runner.Runner(__opts_master__)

if 'SALT_MINION_CONFIG' in os.environ:
    try:
        import salt.config
        import salt.loader
        import jinja2
        import yaml
    except ImportError:
        pass
    else:
        # Create the Salt __opts__ variable
        __opts__ = salt.config.client_config(os.environ['SALT_MINION_CONFIG'])

        # Populate grains if it hasn't been done already
        if not 'grains' in __opts__ or not __opts__['grains']:
            __opts__['grains'] = salt.loader.grains(__opts__)

        # Populate template variables
        __salt__ = salt.loader.minion_mods(__opts__)
        __grains__ = __opts__['grains']
        __pillar__ = salt.pillar.get_pillar(
            __opts__,
            __grains__,
            __opts__['id'],
            __opts__.get('environment'),
        ).compile_pillar()

        JINJA = lambda x, **y: jinja2.Template(x).render(
                grains=__grains__,
                salt=__salt__,
                opts=__opts__,
                pillar=__pillar__,
                **y)

# Start an external editor with \e
##################################
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/438813/

EDITOR = os.environ.get('EDITOR', 'vi')
EDIT_CMD = '\e'

class EditableBufferInteractiveConsole(InteractiveConsole):
    def __init__(self, *args, **kwargs):
        self.last_buffer = [] # This holds the last executed statement
        InteractiveConsole.__init__(self, *args, **kwargs)

    def runsource(self, source, *args):
        self.last_buffer = [ source.encode('utf-8') ]
        return InteractiveConsole.runsource(self, source, *args)

    def raw_input(self, *args):
        line = InteractiveConsole.raw_input(self, *args)
        if line == EDIT_CMD:
            fd, tmpfl = mkstemp('.py')
            os.write(fd, b'\n'.join(self.last_buffer))
            os.close(fd)
            os.system('%s %s' % (EDITOR, tmpfl))
            line = open(tmpfl).read()
            os.unlink(tmpfl)
            tmpfl = ''
            lines = line.split( '\n' )
            for i in range(len(lines) - 1): self.push( lines[i] )
            line = lines[-1]
        return line

c = EditableBufferInteractiveConsole(locals=locals())
c.interact(banner=WELCOME)

# Exit the Python shell on exiting the InteractiveConsole
sys.exit()
